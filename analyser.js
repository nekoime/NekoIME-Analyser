// Generated by CoffeeScript 1.7.1
(function() {
  var OpenCC, article, char, chars, cohesion, combination, combinations, file, fs, index, left_entropy, left_neibor, length, max_length, min_cohesion, min_entropy, min_frequencies, opencc, p, p_combined, right_entropy, right_neibor, statistics, sysdict, time, total_length, word, words, _, _i, _j, _k, _l, _len, _len1, _ref, _ref1;

  fs = require('fs');

  OpenCC = require('opencc');

  opencc = new OpenCC('t2s.json');

  _ = require('underscore');

  _.str = require('underscore.string');

  _.mixin(_.str.exports());

  max_length = 6;

  min_cohesion = 300;

  min_entropy = 1;

  combinations = function(word, allow_whole) {
    var first_part, i, rest_part, result, s, _i, _j, _len, _ref;
    if (allow_whole == null) {
      allow_whole = false;
    }
    result = [];
    for (i = _i = 1, _ref = (allow_whole ? word.length : word.length - 1); 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
      first_part = word.slice(0, i);
      if (i === word.length) {
        result.push([word]);
      } else {
        rest_part = combinations(word.slice(i), true);
        for (_j = 0, _len = rest_part.length; _j < _len; _j++) {
          s = rest_part[_j];
          s.unshift(first_part);
          result.push(s);
        }
      }
    }
    return result;
  };

  if (process.argv[0]) {
    console.error("load " + (process.argv.length - 2) + " files");
    words = {};
    chars = {};
    total_length = 0;
    _ref = process.argv.slice(2);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      article = fs.readFileSync(file, {
        encoding: 'utf8'
      });
      article = article.replace(/[^\u4E00-\u9FA5]+/g, '');
      if (article.length === 0) {
        continue;
      }
      article = opencc.convertSync(article);
      total_length += article.length;
      console.log('单字统计');
      time = new Date();
      for (_j = 0, _len1 = article.length; _j < _len1; _j++) {
        char = article[_j];
        if (chars[char]) {
          chars[char]++;
        } else {
          chars[char] = 1;
        }
      }
      console.log(new Date() - time);
      console.log('右邻字及词频');
      time = new Date();
      words = {};
      for (index = _k = 0, _ref1 = article.length - 2; 0 <= _ref1 ? _k <= _ref1 : _k >= _ref1; index = 0 <= _ref1 ? ++_k : --_k) {
        for (length = _l = 1; 1 <= max_length ? _l <= max_length : _l >= max_length; length = 1 <= max_length ? ++_l : --_l) {
          word = article.substr(index, length);
          statistics = words[word];
          if (statistics) {
            statistics.count++;
          } else {
            statistics = words[word] = {
              count: 1,
              left_neibors: {},
              right_neibors: {}
            };
          }
          left_neibor = article[index - 1];
          if (statistics.left_neibors[left_neibor]) {
            statistics.left_neibors[left_neibor]++;
          } else {
            statistics.left_neibors[left_neibor] = 1;
          }
          right_neibor = article[index + length];
          if (statistics.right_neibors[right_neibor]) {
            statistics.right_neibors[right_neibor]++;
          } else {
            statistics.right_neibors[right_neibor] = 1;
          }
        }
      }
      console.log(new Date() - time);
    }
    min_frequencies = Math.log(total_length);
    sysdict = _.lines(fs.readFileSync('sysdict.txt', {
      encoding: 'utf8'
    }));
    console.error("load " + sysdict.length + " system words");
    for (word in words) {
      statistics = words[word];
      if (!(statistics.count >= min_frequencies)) {
        continue;
      }
      if (word.length <= 2) {
        continue;
      }
      p = statistics.count / total_length;
      p_combined = Math.max.apply(this, (function() {
        var _len2, _m, _ref2, _results;
        _ref2 = combinations(word);
        _results = [];
        for (_m = 0, _len2 = _ref2.length; _m < _len2; _m++) {
          combination = _ref2[_m];
          _results.push(_.reduce(combination, function(memo, part) {
            return memo * (part.length === 1 ? chars[part] : words[part].count) / total_length;
          }, 1));
        }
        return _results;
      })());
      cohesion = p / p_combined;
      if (cohesion < min_cohesion) {
        continue;
      }
      left_entropy = _.reduce(statistics.left_neibors, function(memo, c) {
        return memo + -Math.log(c / statistics.count) * c / statistics.count;
      }, 0);
      if (left_entropy < min_entropy) {
        continue;
      }
      right_entropy = _.reduce(statistics.right_neibors, function(memo, c) {
        return memo + -Math.log(c / statistics.count) * c / statistics.count;
      }, 0);
      if (right_entropy < min_entropy) {
        continue;
      }
      console.log(word, statistics.count, parseInt(cohesion), left_entropy, right_entropy);
    }
    console.error('done');
  } else {
    console.log('Usage: node analyser.js files');
  }

}).call(this);

//# sourceMappingURL=analyser.map
